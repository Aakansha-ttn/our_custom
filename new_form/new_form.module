<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Database\Database;


function new_form_views_data()
{
    $data = [];
    $data['node_table']['table'] = array();
    $data['node_table']['table']['group'] = t('Node table');
    $data['node_table']['table']['provider'] = 'new_form';
    $data['node_table']['table']['base'] = [
        // Identifier (primary) field in this table for Views.
        'field' => 'id',
        // Label in the UI.
        'title' => t('Node Table Data'),
        // Longer description in the UI. Required.
        'help' => t('Node table in views.'),
        'weight' => -10,
    ];
    $data['node_table']['nid'] = array(
        'title' => t('Nid'),
        'help' => t('This is nid of node '),
        'field' => [
            'id' => 'numeric'
        ],
        'filter' => [
            'id' => 'numeric',
        ],
    );
    $data['node_table']['id'] = array(
        'title' => t('id'),
        'help' => t('This is id of node table'),
        'field' => [
            'id' => 'numeric'
        ],
        'filter' => [
            'id' => 'numeric',
        ],
        'relationship' => array(
            'title' => 'body',
            'help' => 'body of node',
            'base' => 'node_field_data',
            'field' => 'nid',
            'id' => 'standard',
        ),
    );
    $data['node_table']['title'] = array(
        'title' => t('title'),
        'help' => t('This is title of node '),
        'field' => [
            'id' => 'standard'
        ],
        'filter' => [
            'id' => 'string',
        ],
    );
    $data['node_table']['description'] = array(
        'title' => t('description'),
        'help' => t('This is description of node '),
        'field' => [
            'id' => 'standard'
        ]
    );
    $data['node_table']['title'] = array(
        'title' => t('title'),
        'help' => t('This is title of node '),
        'field' => [
            'id' => 'standard'
        ]
    );
    $data['node_table']['created'] = array(
        'title' => t('created'),
        'help' => t('This is created date of node '),
        'field' => [
            'id' => 'date'
        ]
    );
    $data['node_table']['updated'] = array(
        'title' => t('updated'),
        'help' => t('This is last updated date of node '),
        'field' => [
            'id' => 'standard'
        ]
    );
    // );
    return $data;
}








function new_form_node_insert(EntityInterface $entity)
{
    $current_user = \Drupal::currentUser();
    $user_roles = $current_user->getRoles();
    if (in_array("authenticated", $user_roles)) {
        if ($entity->getEntityTypeId() == 'node' && $entity->getType() == 'article') {
            //   dump($entity->created->value);die;
            $insert = \Drupal::database()->insert('node_table')
                ->fields([
                    'title' => $entity->title->value,
                    'nid' => $entity->nid->value,
                    'description' => $entity->field_description->value,
                    'created' =>  $entity->created->value,
                    'updated' =>  $entity->changed->value
                ]);
            $insert->execute();
        }
    }
}


function new_form_node_delete(EntityInterface $entity)
{
    // dump("hi");die;
    if ($entity->getEntityTypeId() == 'node' && $entity->getType() == 'article') {
        \Drupal::database()
            ->delete('node_table')
            ->condition('nid', $entity->nid->value)
            ->execute();
    }
}

function new_form_node_update(Drupal\Core\Entity\EntityInterface $entity)
{
    if ($entity->getEntityTypeId() == 'node' && $entity->getType() == 'article') {
        $insert = \Drupal::database()->update('node_table')
            ->fields([
                'title' => $entity->title->value,
                'nid' => $entity->nid->value,
                'description' => $entity->field_description->value,
                'created' =>  $entity->created->value,
                'updated' =>   $entity->changed->value,
            ])->condition('nid', $entity->nid->value);
        $insert->execute();
    }
}

function new_form_form_alter(&$form, FormStateInterface $form_state, $form_id)
{

    if ($form_id == 'new_form') {
        $form['student_rollno']['#prefix'] = '<div class="hi">';
        $form['student_rollno']['#suffix'] = '</div>';
        $form['student_dob']['#default_value'] = date('Y-m-d');
        unset($form['options']['#options']['key1']);
        $form['options']['#default_value'] = ['key2', 'key3'];
        $form['positions']['#default_value'] = 3;
        $form['subjects']['#default_value'] = [3];
        $arr = ['student_name', 'student_rollno', 'student_mail',];
        foreach ($arr as $key) {
            // dump($key);

            $form[$key]['#attributes']['placeholder'] = FALSE;
        }
        function new_form_validate(&$form, FormStateInterface $form_state)
        {
            if (preg_match('~[0-9]+~', ($form_state->getValue('student_name')))) {
                $form_state->setErrorByName('student_name', t('Please enter a valid Name'));
            }

            if (!is_numeric($form_state->getValue('student_rollno'))) {
                $form_state->setErrorByName('student_rollno', t('Please enter a valid Number'));
            }
        }
    }
    // kint($form);die;
    $form['#validate'][] = 'new_form_validate';
}
    // die;
